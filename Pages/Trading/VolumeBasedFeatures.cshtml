@page
@model SocialMediaWebApp.Pages.Trading.VolumeBasedFeatures
@{
    ViewData["Title"] = "Volume Based Features";
}

<style>
    .card-header{
        background-color: black;
        color: white;
    }
    select label{
        background-color: lightgray;
        color: black;
    }
    thead{
        background-color: black;
        color: white;
    }
    
</style>

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <div class="card-header">
            <h4>Inputs:</h4>
        </div>
        <div class="card-body">
            <form method="get">
                <label for="Options" class="form-control-plaintext">Options</label>
                <select name="option" id="option" value="@Model.Option" class="form-control-plaintext">
                    @foreach (string item in Model?.options ?? new List<string>()){
                        <option value="@item">@item</option>
                    }
                </select>
                <hr>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="company" class="form-control-plaintext">Company</label>
                            <input type="text" id="company" name="company" value="@Model?.Company" class="form-control-plaintext" autocomplete="off" spellcheck="false">
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="fileName" class="form-control-plaintext">File Name</label>
                            <input type="text" id="fileName" name="fileName" value="@Model?.FileName" class="form-control-plaintext" autocomplete="off" spellcheck="false">
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="startDate" class="form-control-plaintext">Start Date</label>
                            <input type="text" id="startDate" name="startDate" value="@Model?.StartDate" class="form-control-plaintext" autocomplete="off" spellcheck="false">
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="endDate" class="form-control-plaintext">End Date</label>
                            <input type="text" id="endDate" name="endDate" value="@Model?.EndDate" class="form-control-plaintext" autocomplete="off" spellcheck="false">
                        </div>
                    </div>
                </div>
                <hr>
                <button type="submit" class="btn btn-primary">Generate</button>
            </form>
        </div>
        <hr>
        <div class="card-header">
            <h4>Controls:</h4>
        </div>
        <div class="card-body">
            <hr>
            <div class="mb-3">
                <label for="param" class="form-label">Param</label>
                <input type="text" id="param" class="form-control" autocomplete="off" spellcheck="false"/>
            </div>
            <hr>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <button class="btn btn-primary form-control-plaintext" 
                        onclick="deleteVolumeBasedFeatures()">Delete</button>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <button class="btn btn-primary form-control-plaintext" 
                        onclick="getVolumeBasedFeature()">Get</button>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <button class="btn btn-primary form-control-plaintext" 
                        onclick="getVolumeBasedFeatures()">Get Range</button>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <button class="btn btn-primary form-control-plaintext" 
                        onclick="searchVolumeBasedFeatures()">Search</button>
                    </div>
                </div>
            </div>
            <hr>
        </div>
    </div>
    <div class="col">
        <div class="card">
            <div class="card-header">
                <h3>Response: </h3> 
                <hr>
                @if(Model?.requestResponse != null){
                    <p style="color: white;">@Model.requestResponse.Message</p>
                }
                <hr>
                <pre id="deleteMessage" style="color: white;"></pre>
            </div>
            <div class="card-body">                
                <div class="container">
                    <table class="table table-striped table-hover">
                        <thead class="table text-white">
                            <tr>
                                <th>Company</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                @* <th>File Name</th> *@
                                <th>CreatedAT</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="volumeBasedFeaturesTableBody">

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
        function getVolumeBasedFeatures(){
            const tableBody = document.getElementById('volumeBasedFeaturesTableBody');
            tableBody.innerHTML = "";
            fetch(`http://localhost:5082/api/StockPricesApi/get-volume-based-features`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    data.forEach(item => {
                            var row = tableBody.insertRow();
                            var company = row.insertCell(0);
                            var startDate = row.insertCell(1);
                            var endDate = row.insertCell(2);
                            @* var fileName = row.insertCell(3); *@
                            var createdAT = row.insertCell(3);

                            var pdfDisplay = row.insertCell(4);

                            company.textContent = `Id: ${item.id}` + item.company || 'N/A';
                            startDate.textContent = item.startDate || 'N/A';
                            endDate.textContent = item.endDate || 'N/A';  
                            @* fileName.textContent = item.fileName || 'N/A';   *@
                            createdAT.textContent = item.createdAT || 'N/A';  

                            const link = document.createElement('a');
                            link.href = "#";  // Prevent default navigation
                            link.textContent = "Download";
                            link.style.cursor = "pointer";  // Indicate it's clickable

                            link.addEventListener("click", async function(event) {
                                event.preventDefault();  // Prevent default link behavior

                                // Prepare the request payload
                                const requestBody = {
                                    fileName: item.fileName,
                                    base64Content: item.base64Content
                                };

                                try {
                                    // Send POST request to API
                                    const response = await fetch("http://localhost:5082/api/StockPricesApi/decode-pdf", {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify(requestBody)
                                    });

                                    if (!response.ok) {
                                        throw new Error(`HTTP error! Status: ${response.status}`);
                                    }

                                    // Convert response to a Blob (PDF file)
                                    const blob = await response.blob();
                                    const blobUrl = URL.createObjectURL(blob);

                                    // Create a temporary download link
                                    const downloadLink = document.createElement("a");
                                    downloadLink.href = blobUrl;
                                    downloadLink.download = item.fileName;  // Set the filename
                                    document.body.appendChild(downloadLink);
                                    downloadLink.click();
                                    document.body.removeChild(downloadLink);

                                    // Clean up Blob URL
                                    URL.revokeObjectURL(blobUrl);

                                } catch (error) {
                                    console.error("Error generating PDF:", error);
                                    alert("Failed to generate PDF. Check the console for details.");
                                }
                            });

                            // Add the link to the table
                            pdfDisplay.appendChild(link);
               
                        })
                })
                .catch(error => {
                    console.error('There was a problem with your fetch operation:', error);
                });
        }
        function searchVolumeBasedFeatures(){
            const param = document.getElementById('param');
            const tableBody = document.getElementById('volumeBasedFeaturesTableBody');
            tableBody.innerHTML = "";
            if(param){
                fetch(`http://localhost:5082/api/StockPricesApi/search-volume-based-features?search=${encodeURIComponent(param.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        data.forEach(item => {
                            var row = tableBody.insertRow();
                            var company = row.insertCell(0);
                            var startDate = row.insertCell(1);
                            var endDate = row.insertCell(2);
                            @* var fileName = row.insertCell(3); *@
                            var createdAT = row.insertCell(3);

                            var pdfDisplay = row.insertCell(4);

                            company.textContent = `Id: ${item.id}` + item.company || 'N/A';
                            startDate.textContent = item.startDate || 'N/A';
                            endDate.textContent = item.endDate || 'N/A';  
                            @* fileName.textContent = item.fileName || 'N/A';   *@
                            createdAT.textContent = item.createdAT || 'N/A';   

                            const link = document.createElement('a');
                            link.href = "#";  // Prevent default navigation
                            link.textContent = "Download";
                            link.style.cursor = "pointer";  // Indicate it's clickable

                            link.addEventListener("click", async function(event) {
                                event.preventDefault();  // Prevent default link behavior

                                // Prepare the request payload
                                const requestBody = {
                                    fileName: item.fileName,
                                    base64Content: item.base64Content
                                };

                                try {
                                    // Send POST request to API
                                    const response = await fetch("http://localhost:5082/api/StockPricesApi/decode-pdf", {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify(requestBody)
                                    });

                                    if (!response.ok) {
                                        throw new Error(`HTTP error! Status: ${response.status}`);
                                    }

                                    // Convert response to a Blob (PDF file)
                                    const blob = await response.blob();
                                    const blobUrl = URL.createObjectURL(blob);

                                    // Create a temporary download link
                                    const downloadLink = document.createElement("a");
                                    downloadLink.href = blobUrl;
                                    downloadLink.download = item.fileName;  // Set the filename
                                    document.body.appendChild(downloadLink);
                                    downloadLink.click();
                                    document.body.removeChild(downloadLink);

                                    // Clean up Blob URL
                                    URL.revokeObjectURL(blobUrl);

                                } catch (error) {
                                    console.error("Error generating PDF:", error);
                                    alert("Failed to generate PDF. Check the console for details.");
                                }
                            });

                            // Add the link to the table
                            pdfDisplay.appendChild(link);                  
                        })
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function deleteVolumeBasedFeatures(){
            const param = document.getElementById('param');
            const deleteMessage = document.getElementById('deleteMessage');
            if(param){
                fetch(`http://localhost:5082/api/StockPricesApi/DeleteVolumeBasedFeatures?id=${encodeURIComponent(param.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        deleteMessage.innerHTML = data.message;
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function getVolumeBasedFeature()
        {
            const param = document.getElementById('param');
            const tableBody = document.getElementById('volumeBasedFeaturesTableBody');
            tableBody.innerHTML = "";
            if(param){
                fetch(`http://localhost:5082/api/StockPricesApi/get-volume-based-feature?id=${encodeURIComponent(param.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        data.forEach(item => {
                            var row = tableBody.insertRow();
                            var company = row.insertCell(0);
                            var startDate = row.insertCell(1);
                            var endDate = row.insertCell(2);
                            @* var fileName = row.insertCell(3); *@
                            var createdAT = row.insertCell(3);

                            var pdfDisplay = row.insertCell(4);

                            company.textContent = `Id: ${item.id}` + item.company || 'N/A';
                            startDate.textContent = item.startDate || 'N/A';
                            endDate.textContent = item.endDate || 'N/A';  
                            @* fileName.textContent = item.fileName || 'N/A';   *@
                            createdAT.textContent = item.createdAT || 'N/A';    

                            const link = document.createElement('a');
                            link.href = "#";  // Prevent default navigation
                            link.textContent = "Download";
                            link.style.cursor = "pointer";  // Indicate it's clickable

                            link.addEventListener("click", async function(event) {
                                event.preventDefault();  // Prevent default link behavior

                                // Prepare the request payload
                                const requestBody = {
                                    fileName: item.fileName,
                                    base64Content: item.base64Content
                                };

                                try {
                                    // Send POST request to API
                                    const response = await fetch("http://localhost:5082/api/StockPricesApi/decode-pdf", {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify(requestBody)
                                    });

                                    if (!response.ok) {
                                        throw new Error(`HTTP error! Status: ${response.status}`);
                                    }

                                    // Convert response to a Blob (PDF file)
                                    const blob = await response.blob();
                                    const blobUrl = URL.createObjectURL(blob);

                                    // Create a temporary download link
                                    const downloadLink = document.createElement("a");
                                    downloadLink.href = blobUrl;
                                    downloadLink.download = item.fileName;  // Set the filename
                                    document.body.appendChild(downloadLink);
                                    downloadLink.click();
                                    document.body.removeChild(downloadLink);

                                    // Clean up Blob URL
                                    URL.revokeObjectURL(blobUrl);

                                } catch (error) {
                                    console.error("Error generating PDF:", error);
                                    alert("Failed to generate PDF. Check the console for details.");
                                }
                            });

                            // Add the link to the table
                            pdfDisplay.appendChild(link);                  
                        })
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
    </script>
}