@page
@model SocialMediaWebApp.Pages.NewsPages.NewsSearch
@{
    ViewData["Title"] = "NewsSearch";
}

<h1>@ViewData["Title"]</h1>

<style>
    /* Newspaper layout */
    #plotContainer {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
    }

    /* Plot image styles */
    .plot {
        width: 100%; /* Makes images responsive */
        max-width: 650px; /* Ensure plots remain small */
        height: auto;
        margin: 10px auto;
        display: block;
    }

    /* Media queries for responsiveness */
    @@media (max-width: 768px) {
        .card {
            width: 90%;
        }
    }

    @@media (max-width: 480px) {
        .card {
            width: 100%;
        }
    }

    a{
        color: black;
    }
    .news-container {
        margin: 20px auto;
        max-width: 1200px;
        padding: 15px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .news-heading {
        text-align: center;
        margin-bottom: 20px;
        font-size: 2rem;
        color: #333;
        font-family: 'Georgia', serif;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 1rem;
        text-align: left;
    }

    .table thead {
        background-color: #333;
        color: #fff;
    }

    .table tbody tr {
        transition: background-color 0.3s ease;
    }

    .table tbody tr:hover {
        background-color: #f1f1f1;
    }

    .news-title-link {
        color: #007bff;
        text-decoration: none;
        font-weight: bold;
    }

    .news-title-link:hover {
        text-decoration: underline;
    }

    .news-image {
        max-width: 350px;
        height: auto;
        border-radius: 4px;
        border: 1px solid #ddd;
    }

    .no-results {
        text-align: center;
        color: #555;
        margin-top: 20px;
        font-size: 1.2rem;
        font-family: 'Arial', sans-serif;
    }

</style>

<h1>News Search</h1>
<hr>
<div class="row">
    <div class="col">
        <a class="nav-link text-dark" asp-area="" asp-page="/Documents/TextOccurenceSearch">Text Search</a>
    </div> 
    <div class="col">
        <a class="nav-link text-dark" asp-area="" asp-page="/GoogleSearch/PdfContentExtraction">Pdf Content Extraction</a>
    </div>  
    <div class="col">
        <a class="nav-link text-dark" asp-area="" asp-page="/Documents/NewsArticlePrompts">News Prompting</a>
    </div> 
    <div class="col">
        <a class="nav-link text-dark" asp-area="" asp-page="/LanguageProcessing/TextOccurenceLanguageFeatures">NLP</a>
    </div> 
    <div class="col">
        <a class="nav-link text-dark" asp-area="" asp-page="/NewsPages/SearchNewsArticles">Search Saved News</a>
    </div>  
    <div class="col">
        <a class="nav-link text-dark" asp-area="" asp-page="/Documents/PromptContextSearch">Sentiment Search</a>
    </div>  
</div>
<hr>
<div class="card">
    <div class="row">   
        <div class="col-md-4">
            <div class="card-header">
                <h4>Search string</h4>
            </div>
            <div class="card-body">
                <form method="get">
                    <div class="mb-3">
                        <label for="search" class="form-label">Search Query</label>
                        <input type="text" id="search" name="search" class="form-control" value="@Model.Search" autocomplete="off" spellcheck="false"/>
                    </div>
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>
            </div>
            <hr>
            <div class="card-header">
                <h4>Add Person</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <div class="mb-3">
                            <label for="search" class="form-label">Full Name</label>
                            <input type="text" id="fullName" class="form-control" autocomplete="off" spellcheck="false"/>
                        </div>
                    </div>
                    <div class="col">
                        <div class="mb-3">
                            <label for="search" class="form-label">role</label>
                            <input type="text" id="role" class="form-control" autocomplete="off" spellcheck="false"/>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-3">
                            <label for="search" class="form-label">Birthdate</label>
                            <input type="text" id="birthdate" class="form-control" autocomplete="off" spellcheck="false"/>
                        </div>
                    </div>
                    <div class="col">
                        <div class="mb-3">
                            <label for="search" class="form-label">State</label>
                            <input type="text" id="state" class="form-control" autocomplete="off" spellcheck="false"/>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary form-control-plaintext" onclick="postPerson()">Add Person</button>
                        </div>
                        <hr>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary form-control-plaintext" onclick="getPerson()">Get Person</button>
                        </div>
                        <hr>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary form-control-plaintext" onclick="getPeople()">Get People</button>
                        </div>
                        <hr>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary form-control-plaintext" onclick="deletePerson()">Delete Person</button>
                        </div>
                    </div>
                    <div class="col">
                        <div class="mb-3">
                            <label for="param" class="form-label">Param</label>
                            <input type="text" id="param" class="form-control" autocomplete="off" spellcheck="false"/>
                        </div>
                    </div>
                </div>                
            </div>
            <hr>
            <div class="card-header">
                <h3>People </h3>
                <hr>
                <pre id="peopleMessageResponse"></pre>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>FullName</th>
                            <th>Role</th>
                            <th>Birthdate</th>
                            <th>State</th>
                            <th>CreatedAT</th>
                        </tr>
                    </thead>
                    <tbody id="peopleTableBody">

                    </tbody>
                </table>
            </div>
            <hr>
            <div class="card-header">
                <h3>Plot U.S. Weather</h3>
            </div>
            <hr>
            <pre id="weatherVisualizationMessage"></pre>
            <hr>
            <div class="card-body">
                <div class="form-group">
                    <label for="City">Select City</label>
                    <select id="city" class="form-control-plaintext" onchange="getLatitudeLongitude()">

                    </select>
                </div>
                <hr>
                <div class="row">
                    <div class="col">
                        <div class="mb-3">
                            <label for="latitude" class="form-label">Latitude</label>
                            <input type="text" id="latitude" class="form-control" autocomplete="off" spellcheck="false" readonly/>
                        </div>
                    </div>
                    <div class="col">
                        <div class="mb-3">
                            <label for="longitude" class="form-label">Longitude</label>
                            <input type="text" id="longitude" class="form-control" autocomplete="off" spellcheck="false" readonly/>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col">
                        <div class="mb-3">
                            <label for="state" class="form-label">State</label>
                            <input type="text" id="us_state" class="form-control" autocomplete="off" spellcheck="false" readonly/>
                        </div>
                        <hr>
                        <div class="mb-3">
                            <label for="weatherParam" class="form-label">Search | Id</label>
                            <input type="text" id="weatherParam" class="form-control" autocomplete="off" spellcheck="false"/>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary form-control-plaintext" onclick="postWeatherVisualization()">
                                Visualize
                            </button>
                        </div>
                        <hr>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary form-control-plaintext" onclick="searchWeatherVisualization()">Search</button>
                        </div>
                        <hr>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary form-control-plaintext" onclick="deleteWeatherVisualization()">Delete Person</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col">
            @if (!ModelState.IsValid)
            {
                <div class="alert alert-primary">
                    @foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <p>@error.ErrorMessage</p>
                    }
                </div>
            }
            <hr>
            @if (Model.SearchResults != null && Model.SearchResults.Any())
            {
                <div class="news-container">
                    <h2 class="news-heading">Latest News</h2>
                    <table class="table table-striped table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Title</th>
                                <th>Image</th>
                                <th>Description</th>
                                <th>Published At</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var result in Model.SearchResults)
                            {
                                <tr>
                                    <td>
                                        <a href="@result.Url" target="_blank" class="news-title-link">
                                            @result.Title.Replace('&', ' ')
                                        </a>
                                    </td>
                                    <td>
                                        <img src="@result.UrlToImage" alt="News Image" class="news-image" />
                                    </td>
                                    <td style="font-size: small;">@result.Description.Replace('&', ' ')</td>
                                    <td style="font-size: small;">@result.PublishedAt</td>
                                    <td>
                                        <ol>
                                            <li>
                                                <a href="http://localhost:5082/api/NewsApi/post-news-article?title=@result.Title.Replace('&', ' ')&description=@result.Description.Replace('&', ' ')&url=@result.Url&urlToImage=@result.UrlToImage&publishedAt=@result.PublishedAt" target="_blank" class="news-title-link">
                                                    Add
                                                </a>
                                            </li>
                                            <li>
                                                <a href="http://localhost:5082/api/TextToSpeechApi/text-to-speech?text=@result.Description.Replace('&', ' ')" target="_blank" class="news-title-link">
                                                    Speak
                                                </a>
                                            </li>
                                            <li>
                                                <a href="http://localhost:5082/api/TextAnalysisApi/get-entities?title=@result.Title.Replace('&', ' ')&searchString=news&text=@result.Description.Replace('&', ' ')" target="_blank" class="news-title-link">
                                                    Entities
                                                </a>
                                            </li>
                                            <li>
                                                <a href="http://localhost:5082/api/TextAnalysisApi/get-noun-chunks?title=@result.Title.Replace('&', ' ')&searchString=news&text=@result.Description.Replace('&', ' ')" target="_blank" class="news-title-link">
                                                    Chunks
                                                </a>
                                            </li>
                                            <li>
                                                <a href="http://localhost:5082/api/TextAnalysisApi/get-sentiments?title=@result.Title.Replace('&', ' ')&searchString=news&text=@result.Description.Replace('&', ' ')" target="_blank" class="news-title-link">
                                                    Sentiments
                                                </a>
                                            </li>
                                            <li>
                                                <a href="http://localhost:5082/api/RecursiveSearch/features-extraction?search_string=@result.Title.Replace('&', ' ') @result.Description.Replace('&', ' ')">Features</a>
                                            </li>
                                            <li>
                                                <a href="http://localhost:5082/api/TextGeneration/generate-information-extraction-decision?sentence=@result.Title.Replace('&', ' ') @result.Description.Replace('&', ' ')">Question Answering</a>
                                            </li>
                                        </ol>
                                        
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="no-results">
                    <p>No search results found or unable to fetch data.</p>
                </div>
            }
        </div>
    </div>
    <div class="" id="plotContainer">

    </div>    
</div>
@section Scripts {
    <script type="text/javascript">
        function getPeople(){
            const tableBody = document.getElementById('peopleTableBody');
            tableBody.innerHTML = "";
            fetch(`http://localhost:5082/api/PeopleApi/get-people`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    data.forEach(item => {
                            var row = tableBody.insertRow();
                            var id = row.insertCell(0);
                            var fullName = row.insertCell(1);
                            var role = row.insertCell(2);
                            var birthdate = row.insertCell(3);
                            var state = row.insertCell(4);
                            var createdAT = row.insertCell(5);

                            id.textContent = item.id || "N/A";
                            fullName.textContent = item.fullName || 'N/A';
                            role.textContent = item.role || 'N/A';
                            birthdate.textContent = item.birthdate || 'N/A';
                            state.textContent = item.state || 'N/A';
                            createdAT.textContent = item.createdAT || 'N/A';                 
                        })
                })
                .catch(error => {
                    console.error('There was a problem with your fetch operation:', error);
                });
        }
        function searchPeople(){
            const param = document.getElementById('param');
            const tableBody = document.getElementById('peopleTableBody');
            tableBody.innerHTML = "";
            if(param){
                fetch(`http://localhost:5082/api/PeopleApi/search-person?search=${encodeURIComponent(param.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        data.forEach(item => {
                            var row = tableBody.insertRow();
                            var id = row.insertCell(0);
                            var fullName = row.insertCell(1);
                            var role = row.insertCell(2);
                            var birthdate = row.insertCell(3);
                            var state = row.insertCell(4);
                            var createdAT = row.insertCell(5);

                            id.textContent = item.id || "N/A";
                            fullName.textContent = item.fullName || 'N/A';
                            role.textContent = item.role || 'N/A';
                            birthdate.textContent = item.birthdate || 'N/A';
                            state.textContent = item.state || 'N/A';
                            createdAT.textContent = item.createdAT || 'N/A';                 
                        })
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function deletePerson(){
            const param = document.getElementById('param');
            const deleteMessage = document.getElementById('peopleMessageResponse');
            if(param){
                fetch(`http://localhost:5082/api/PeopleApi/DeletePerson?id=${encodeURIComponent(param.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        deleteMessage.innerHTML = data.message;
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function getPerson()
        {
            const param = document.getElementById('param');
            const tableBody = document.getElementById('peopleTableBody');
            tableBody.innerHTML = "";
            if(param){
                fetch(`http://localhost:5082/api/PeopleApi/get-person?id=${encodeURIComponent(param.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        data.forEach(item => {
                            var row = tableBody.insertRow();
                            var id = row.insertCell(0);
                            var fullName = row.insertCell(1);
                            var role = row.insertCell(2);
                            var birthdate = row.insertCell(3);
                            var state = row.insertCell(4);
                            var createdAT = row.insertCell(5);

                            id.textContent = item.id || "N/A";
                            fullName.textContent = item.fullName || 'N/A';
                            role.textContent = item.role || 'N/A';
                            birthdate.textContent = item.birthdate || 'N/A';
                            state.textContent = item.state || 'N/A';
                            createdAT.textContent = item.createdAT || 'N/A';                 
                        })
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function postPerson(){            
            const fullName = document.getElementById('fullName');
            const role = document.getElementById('role');
            const birthdate = document.getElementById('birthdate');
            const state = document.getElementById('us_state');
            const message = document.getElementById('peopleMessageResponse');
            if(fullName && role && birthdate && state){
                fetch(`http://localhost:5082/api/PeopleApi/post-person?fullName=${encodeURIComponent(fullName.value)}&role=${encodeURIComponent(role.value)}&birthdate=${encodeURIComponent(birthdate.value)}&state=${encodeURIComponent(state.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(item => {
                        message.innerHTML = item.message;
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function getCityLongitudeLatitude()
        {
            const dropdown = document.getElementById('city');
            dropdown.innerHTML = "";
            fetch(`http://localhost:5082/api/CitiesApi/get-cities`) // Replace 'ControllerName' with the name of your controller
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {                
                    data.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.city;
                        option.textContent = item.city;
                        dropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('There was a problem with your fetch operation:', error);
                });
        }
        getCityLongitudeLatitude();
        function getLatitudeLongitude(){
            const latitude = document.getElementById('latitude');
            const longitude = document.getElementById('longitude');
            const city = document.getElementById('city');
            const state = document.getElementById('us_state');
            if(city){
                fetch(`http://localhost:5082/api/CitiesApi/search-latitude-longitude?city=${encodeURIComponent(city.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(item => {
                        latitude.value = item.latitude;
                        longitude.value = item.longitude;
                        state.value = item.state;
                        console.log(item.state);
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function postWeatherVisualization(){
            const latitude = document.getElementById('latitude');
            const longitude = document.getElementById('longitude');
            const city = document.getElementById('city');
            const state = document.getElementById('us_state');
            const message = document.getElementById('weatherVisualizationMessage');
            if(latitude && longitude && city && state){
                fetch(`http://localhost:5082/api/WeatherApi/post-weather-visualization?latitude=${encodeURIComponent(latitude.value)}&longitude=${encodeURIComponent(longitude.value)}&city=${encodeURIComponent(city.value)}&state=${encodeURIComponent(state.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(item => {
                        message.innerHTML = item.message;
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function searchWeatherVisualization(){
            const param = document.getElementById('weatherParam');
            if(param){
                fetch(`http://localhost:5082/api/WeatherApi/search-weather?search=${encodeURIComponent(param.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log(data);
                        data.forEach(item => { 
                            const card = document.createElement('div');
                            card.className = 'card';

                            const cardHeader = document.createElement('div');
                            cardHeader.className = 'card-header';

                            // Replace "### " with "\n" and "- " with "\n- "
                            const interpretation = item.interpretation
                                ? item.interpretation.replaceAll("### ", "\n").replaceAll("- ", "\n- ")
                                : 'N/A';

                            cardHeader.innerHTML = `
                                <h3>State: ${item.state || 'N/A'}</h3>
                                <p><i>City:</i> ${item.city || 'N/A'}</p>
                                <p>Interpretation: <pre>${interpretation}</pre></p>`;
                            card.appendChild(cardHeader);

                            const cardBody1 = document.createElement('div');
                            cardBody1.className = 'card-body';

                            const img1 = document.createElement('img');
                            img1.src = `data:image/png;base64, ${item.encodedImageCurrent}`;
                            img1.alt = 'Plot';
                            img1.className = 'plot';
                            cardBody1.appendChild(img1);

                            card.appendChild(cardBody1);

                            const cardBody2 = document.createElement('div');
                            cardBody2.className = 'card-body';

                            const img2 = document.createElement('img');
                            img2.src = `data:image/png;base64, ${item.encodedImageHourly}`;
                            img2.alt = 'Plot';
                            img2.className = 'plot';
                            cardBody2.appendChild(img2);

                            card.appendChild(cardBody2);

                            plotContainer.appendChild(card);
                        });
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
        function deleteWeatherVisualization(){
            const param = document.getElementById('weatherParam');
            const message = document.getElementById('weatherVisualizationMessage');
            if(param){
                fetch(`http://localhost:5082/api/WeatherApi/DeleteWeather?id=${encodeURIComponent(param.value)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(item => {
                        message.innerHTML = item.message;
                    })
                    .catch(error => {
                        console.error('There was a problem with your fetch operation:', error);
                    });
            }
        }
    </script>
}